#Print the Elements of a Linked List

void printLinkedList(SinglyLinkedListNode* head) {
    struct SinglyLinkedListNode *ptr;
    ptr=head;
    while(ptr!=NULL){
        cout<<ptr->data<<endl;
        ptr=ptr->next;
        
    }


}



#Insert a Node at the Tail of a Linked List

SinglyLinkedListNode* insertNodeAtTail(SinglyLinkedListNode* head, int data) {
    struct SinglyLinkedListNode *ptr;
    struct SinglyLinkedListNode *temp;
    
    temp=(struct SinglyLinkedListNode*) malloc(sizeof(struct SinglyLinkedListNode));
    
    temp->data= data;
    temp->next= NULL;
    if(head==NULL){
        return temp;
        
        
    }
    ptr=head;
    while(ptr->next!=NULL){
        ptr=ptr->next;
    }
    ptr->next=temp;
    
    return head;
    
}


#Inserting a node at the head

SinglyLinkedListNode* insertNodeAtHead(SinglyLinkedListNode* head, int data) {
    SinglyLinkedListNode  *temp;
    temp=(struct SinglyLinkedListNode*)malloc(sizeof(struct SinglyLinkedListNode));
    temp->data=data;
    temp->next = head;
    return temp;
    
    
    


}

#Insert a node at a specific position in a linked list

SinglyLinkedListNode* insertNodeAtPosition(SinglyLinkedListNode* head, int data, int position) {
     struct SinglyLinkedListNode *ptr,*temp;
    temp=(struct SinglyLinkedListNode*) malloc(sizeof(struct SinglyLinkedListNode));
    temp->data= data;
    temp->next= NULL;
    ptr=head;
    while(position !=1){
        ptr=ptr->next;
        position--;
    }
    temp->next=ptr->next;
    ptr->next=temp; 
    return head;
    
    
    
    
    

}


#DELETING A NODE
SinglyLinkedListNode* deleteNode(SinglyLinkedListNode* head, int position) {
    SinglyLinkedListNode *ptr =head, *ptr2=head;
    
    if (position==0) {
        
        free(head);
        head=ptr->next;
    }
    else{
        while(position!=0){
            ptr2=ptr;
            ptr=ptr->next;
            position--;
        }
   
        ptr2->next=ptr->next;
        free(ptr);
        ptr=NULL;
    }
    return (head);
    
    
    
    

}

























